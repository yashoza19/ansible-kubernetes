---
- name: get avalability zones
  aws_az_info:
    region: us-east-1
  register: zones

- debug:
    var: zones

- name: making list of all zones
  set_fact:
    node_zone: "{{ zones.availability_zones[0:3] | map(attribute='zone_name')| join(',') }}"
    master_zone: "{{ zones.availability_zones[0:1] | map(attribute='zone_name')| join(',') }}"

- block:
  - name: check if {{ cluster_name }} already exist
    shell: kops get clusters --state {{ state_store }} {{ cluster_name }}
    register: kops_get_clusters
    changed_when: no
    failed_when: no
  rescue:
    - debug:
        msg: 'Cluster is already present'

- debug:
    var: kops_get_clusters

# - name: create cluster
#   shell: "kops create cluster \
#           --name={{ cluster_name }} 
#           --cloud aws \
#           --bastion={{ bastion }} \
#           --dns private \
#           --state {{ state_store }}
#           --dns-zone={{ dns_zone }} \
#           --master-count={{ master_count }} \
#           --master-size={{ master_size }} \
#           --master-zones={{ master_zone }} \
#           --node-count={{ node_count }} \
#           --node-size={{ node_size }} \
#           --topology=private \
#           --networking=flannel
#           --zones={{ node_zone }}"

# - block:
#   - name: kops update
#     shell: "kops update cluster --state {{ state_store }} --yes --name {{ cluster_name }}"
#   rescue:
#     - debug:
#         msg: 'Error, usually because of Elastic IP Limit'

# - name: Create Bastion
#   shell: "kops create instancegroup bastions --role Bastion --subnet us-east-1a --name {{cluster_name}} --state {{ state_store }}"

- block:
  - name: kops update
    shell: "kops update cluster --state {{ state_store }} --yes --name {{ cluster_name }}"
  rescue:
    - debug:
        msg: 'Error, usually because of Elastic IP Limit'

- name: Verify all Kubernetes Nodes are ready
  shell: "kops validate cluster --name {{ cluster_name }} --state {{ state_store }}"
  register: cmd_result
  until: cmd_result.stdout.find('Your cluster ' + cluster_name + ' is ready') != -1
  retries: 10
  delay: 75
  when: kops_get_clusters.rc != 0